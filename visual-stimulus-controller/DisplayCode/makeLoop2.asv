function makeLoop

global Lstate GUIhandles looperInfo

%Get number of looper parameters
Nparam = 0;
for i = 1:length(Lstate.param)
    if ~isempty(Lstate.param{i}{1})
        Nparam = Nparam+1;
    end
end

%Produces a cell array 'd', with each element corresponding to a different
%looper variable.  Each element contains a multidimensional array from
%meshgrid with as many elements as there are conditions. They are id's, not
%actually variable values.

nc = 1;
for i = 1:Nparam
    eval(['paramV = ' Lstate.param{i}{2} ';']);
    nc = nc*length(paramV);
    if i == 1
        istring = ['1:' num2str(length(paramV))];
        ostring = ['d{' num2str(i) '}'];
    else
        istring = [istring ',1:' num2str(length(paramV))];
        ostring = [ostring ',' 'd{' num2str(i) '}'];
    end
    
end

istring = ['meshgrid(' istring ')'];
ostring = ['[' ostring ']'];
eval([ostring ' = ' istring ';']);

%meshgrid outputs 2D grid, even for 1D input...
if Nparam == 1
    d{1} = d{1}(1,:);
end

nr = str2num(get(GUIhandles.looper.repeats,'string'));                      


%Create random sequence of across conditions, for each repeat
for rep = 1:nr
    
    if get(GUIhandles.looper.randomflag,'value')
        [dum seq{rep}] = sort(rand(1,nc));  %make random sequence
    else                          
        seq{rep} = 1:nc;                                   
    end
                                
end 


%Make the analyzer structure
for c = 1:nc
    for p = 1:Nparam
        
        idx = d{p}(c); %index into value vector of parameter p

        paramS = Lstate.param{p}{1};
        eval(['paramV = ' Lstate.param{p}{2} ';']);  %value vector

        looperInfo{c}.symbol{p} = paramS;
        looperInfo{c}.val{p} = paramV(idx);

    end
    
    for r = 1:nr
        id = find(seq{r} == )
        looperInfo{c}.repeats{r}.timetag = nc*(r-1) + pres - 1;
    end
    
end





% for pres = 1:nc
%     for rep = 1:nr
%         c = cond(rep,pres);
%         looperInfo{rep}{pres}.trialno = nc*(rep-1) + pres - 1;
%         for j = 1:Nparam
%             idx = condID{rep}(pres,j); %value vector index
%             
%             paramS = Lstate.param{j}{1};
%             eval(['paramV = ' Lstate.param{j}{2} ';']);  %value vector
%             
%             looperInfo{rep}{pres}.symbol{j} = paramS;
%             looperInfo{rep}{pres}.val{j} = paramV(idx);
%             
%         end
%     end
% end
        
