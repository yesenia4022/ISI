function getCellStats(Flim,blim)

global ACQinfo cellS

framePer = ACQinfo.linesPerFrame*ACQinfo.msPerLine;  %frame period in ms
Flim = Flim+ACQinfo.stimPredelay*1000;  %user input is relative to stimulus onset, not trial beginning

Frame1 = floor(Flim(1)/framePer) + 1;
Frame2 = ceil(Flim(2)/framePer) + 1;

Nt = length(cellS.cellMat{1}(1,:,1));
Ncell = length(cellS.cellMat{1}(:,1,1));
dom = linspace(-framePer*Nt/2,framePer*Nt/2,Nt);
sig = 100;  %ms
smoother = exp(-dom.^2/(2*sig^2));
smoother = smoother/sum(smoother);
smoother = ones(Ncell,1)*smoother;
smoother = abs(fft(smoother,[],2));

nf = length(Frame1:Frame2);

%Baseline normalization
bframe1 = floor(blim(1)/framePer) + 1;
bframe2 = ceil(blim(2)/framePer) + 1;
for i = 1:length(cellS.cellMat)  %loop through each condition
    for j = 1:length(cellS.cellMat{i}(:,1,1))
        condcellMat = squeeze(cellS.cellMat{i}(j,:,:);
        blank = mean(condcellMat(bframe1:bframe2,:));
        blank = ones(length(condcellMat(:,1)))*blank;
        c
    end
end

%Stats
for i = 1:length(cellS.cellMat)  %loop through each condition
    
    nr = getnorepeats(i);
    
    dim = size(cellS.cellMat{i});
    
    cellS.muTime{i} = squeeze(mean(cellS.cellMat{i},3)); %mean across repeats
    cellS.mu{i} = mean(cellS.muTime{i}(:,Frame1:Frame2),2);  %mean across repeats and time window
    
    muTimesmooth = ifft(fft(cellS.muTime{i},[],2).*smoother,[],2);  %smooth before taking max
    cellS.maxi{i} = max(muTimesmooth(:,Frame1:Frame2),[],2);  %mean across repeats; max over time window
    
    cellS.sigTime{i} = std(cellS.cellMat{i},[],3)/sqrt(nr); %std error across repeats
%     dum = reshape(cellS.cellMat{i}(:,Frame1:Frame2,:),dim(1),dim(3)*length(Frame1:Frame2));
%     cellS.sig{i} = std(dum,[],2)/sqrt(nr*nf); %std error across time and repeats
    
    %I think computing the mean across time first (as done below) is a
    %better way to compute the standard error for each condition.
    %Otherwise, the standard error becomes really low due to the number of
    %time samples (as above). It also doesn't really make sense to compute
    %a standard deviation across two dimensions (i.e. repeats and time
    %points)
    dum = squeeze(mean(cellS.cellMat{i}(:,Frame1:Frame2,:),2));
    cellS.sig{i} = std(dum,[],2)/sqrt(nr); %std error across repeats, for each condition
    
end