function Gplotaxismap_RC

global ACQinfo Analyzer cellS maskS G_RChandles

%%%%

tauN = str2num(get(G_RChandles.kernelLength,'string'));

masklabel = bwlabel(maskS.bwCell{1},4);
celldom = unique(masklabel);
nID = getNeuronMask;

%%%%

eval(['kernDel = ' get(G_RChandles.kernelLength,'string') ';']);
tauL = kernDel(2)-kernDel(1); %ms
acqPeriod = ACQinfo.linesPerFrame*ACQinfo.msPerLine; 
Ntau = round(tauL/acqPeriod);
taudom = linspace(kernDel(1),kernDel(2),Ntau);

delayWin = [100 1200];  %assume the peak response is within this time window
[dum delayWinID(1)] = min(abs(delayWin(1)-taudom));
[dum delayWinID(2)] = min(abs(delayWin(2)-taudom));

expt = [Analyzer.M.anim '_' Analyzer.M.unit '_' Analyzer.M.expt];
load(['C:\2p_data\' Analyzer.M.anim '\log_files\' expt])
%load(['F:\neurostuff\log_files\' expt])

%%%%%%%%%%%%%%%%%%%
oridom = domains.oridom;
sfdom = domains.sfdom;
phasedom = domains.phasedom;
colordom = domains.colordom;

for i = 1:length(colordom)
    for p = 1:length(cellS.muTime)
        kernC{i}{p} = squeeze(cellS.muTime{p}(:,:,:,i,:));
        kernSigC{i}{p} = squeeze(cellS.sigTime{p}(:,:,:,i,:));
    end    
end

Ncell = length(cellS.muTime);
NT = getnotrials;

Ntau = Ntau+1;

%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Make smoothing functions (used to find maxima)

kernsmooth = getSmoother([.1 .5 1 .5 .1],[.1 1 .1],[.5 1 .5],taudom,oridom,sfdom);

%Smoother before taking ori curve
orismoother = getSmoother([.1 .5 1 .5 .1],[.1 1 .1],1,taudom,oridom,sfdom);

%Smoother before taking sf curve
sfsmoother = getSmoother([.2 .5 1 .5 .2],1,[.3 1 .3],taudom,oridom,sfdom);

%Smoother before taking temporal curve
tsmoother = getSmoother(1,[.4 1 .4],[.1 1 .1],taudom,oridom,sfdom);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
colorid = {'r','g','b'};

%plot ori curves

for p = 1:Ncell
    %subplot(ceil(sqrt(Ncell)),ceil(sqrt(Ncell)),p)
    
    for c = 1:length(colordom)
        %mean over phase
        kernplot = squeeze(mean(kernC{c}{p},3)); %average over phase
        kernsigplot = squeeze(mean(kernSigC{c}{p},3)); %average over phase
        
        kerndum = ifftn(fftn(kernplot).*abs(fftn(kernsmooth)));  %smooth in all dimensions (used to find slice)
        kerndum(:,:,delayWinID(1):delayWinID(2));  %limit it to a reasonable time window
        
        kernplot = ifftn(fftn(kernplot).*abs(fftn(orismoother))); %smooth over all dimensions but orientation
        kernsigplot = ifftn(fftn(kernsigplot).*abs(fftn(orismoother))); %smooth over all dimensions but orientation
        
        %Reduce error bars based on the smoothing operation
        osmoothSlice = orismoother(1,:,:);
        D = sum(osmoothSlice(:)/max(osmoothSlice(:)));
        kernsigplot = kernsigplot/sqrt(D);
        
        [ma idma] = max(kerndum,[],3);  %find maxima from smoothed version
        [bestoriid bestsfid] = find(ma == max(ma(:)));
        tau = idma(bestoriid,bestsfid);
        
        %tcori = squeeze(kernplot(:,bestsfid,tau));
        %tcsigori = squeeze(mean(kernsigplot(:,bestsfid,tau),2));
        
        tcori = squeeze(mean(kernplot(:,1:2,tau),2));
        tcsigori = squeeze(mean(kernsigplot(:,1:2,tau),2));
        
        orimuMat{c}(p,:) = tcori;
        orisigMat{c}(p,:) = tcsigori;        
        
        [OMag(p) OAng(p)] = orifind(tcori,oridom);
        
        %plot(oridom,tcori,['.' colorid{c} '-']), hold on
    end
    
    
end

cellS.orimuMat = orimuMat{1};
cellS.orisigMat = orisigMat{1};

cellS.oriBasesigMat = orisigMat{1};


%time courses
%figure
for p = 1:Ncell
    %subplot(ceil(sqrt(Ncell)),ceil(sqrt(Ncell)),p)

    kernplot = cellS.muTime{p};
    kernplotSig = cellS.sigTime{p};
    kernplot = squeeze(mean(kernplot,3)); %average over phase    
    kernplotSig = squeeze(mean(kernplotSig,3));
    kerndum = ifftn(fftn(kernplot).*abs(fftn(kernsmooth)));
    kerndum(:,:,delayWinID(1):delayWinID(2));  %limit it to a reasonable time window
    kernplot = ifftn(fftn(kernplot).*abs(fftn(tsmoother)));
    kernplotSig = ifftn(fftn(kernplotSig).*abs(fftn(tsmoother)));
    
    %Reduce error bars based on the smoothing operation
    tsmoothSlice = tsmoother(:,:,1);
    D = sum(tsmoothSlice(:)/max(tsmoothSlice(:)));
    kernplotSig = kernplotSig/sqrt(D);
    
    [ma idma] = max(kerndum,[],3);
    [bestoriid bestsfid] = find(ma == max(ma(:)));
    [mi idmi] = min(kerndum,[],3);
    [worstoriid worstsfid] = find(mi == min(mi(:)));

    %x = 7;

    tcourse_ma = squeeze(kernplot(bestoriid,bestsfid,:));
    tcourseSig_ma = squeeze(kernplotSig(bestoriid,bestsfid,:));
    tcourse_orth = squeeze(kernplot(worstoriid,worstsfid,:));
    tcourseSig_orth = squeeze(kernplotSig(worstoriid,worstsfid,:));

    tcoursemaMat{c}(p,:) = tcourse_ma;
    tcourseorthMat{c}(p,:) = tcourse_orth;
    
    tcourseSigmaMat{c}(p,:) = tcourseSig_ma;
    tcourseSigorthMat{c}(p,:) = tcourseSig_orth;
    
%     tcourse_ma = mean(kernplot);
%     tcourse_orth = blankresp;
    
    %plot(taudom,tcourse_ma), hold on, plot(taudom,tcourse_orth,'-r')
    %xlim([taudom(1) taudom(end)])

end

cellS.tcoursemaMat = tcoursemaMat{1};
cellS.tcourseorthMat = tcourseorthMat{1};
cellS.tcourseSigmaMat = tcourseSigmaMat{1};
cellS.tcourseSigorthMat = tcourseSigorthMat{1};


%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%


%Now plot color image of tuning
OMag = OMag-min(OMag);
OMag = OMag/max(OMag);

mag = zeros(ACQinfo.linesPerFrame,ACQinfo.pixelsPerLine);
ang = zeros(ACQinfo.linesPerFrame,ACQinfo.pixelsPerLine);
for p = 2:Ncell

    idcell{p} = find(masklabel(:) == celldom(nID(p)));
    
    mag(idcell{p}) = OMag(p);
    ang(idcell{p}) = OAng(p);
    
end

mag = log10(mag+.01);
mag = mag-min(mag(:));
mag = mag/max(mag(:));


figure,
imagesc(ang,'AlphaData',mag,[0 180]), colormap hsv, colorbar
fh = gcf;


mag = mag(3:end-2,3:end-2); ang = ang(3:end-2,3:end-2);

mag = mag-min(mag(:));
mag = mag/max(mag(:));

dim = size(ang);
set(gcf,'Color',[1 1 1]);

anatflag = 1;

if anatflag
    
    imanat = maskS.im{1}(3:end-2,3:end-2);
    
    mi = prctile(imanat(:),1);    
    imanat = phi(imanat-mi);
    ma = prctile(imanat(:),99);
    imanat = imanat/ma;

    imfunc = ang;
    imfunc = imfunc/180;
    imfunc = round(imfunc*63+1);
    %imanat = round(imanat*63+1);

    hsvid = hsv;
    imout = zeros(dim(1),dim(2),3);
    for i = 1:dim(1)
        for j = 1:dim(2)            
            imout(i,j,:) = mag(i,j)*hsvid(imfunc(i,j),:);
        end
    end
    
    imanat(:,:,2) = imanat;
    imanat(:,:,3) = imanat(:,:,1);
    
    imout = imout+sqrt(imanat);

    imout = imout/max(imout(:));
    
    x = image(imout,'CDataMapping','direct','AlphaDataMapping','none');

else
    imout = ang;
    imout = imout/180;
    imout = round(imout*63+1);
    x = image(1:length(ang(1,:)),1:length(ang(:,1)),imout,'CDataMapping','direct','AlphaData',mag,'AlphaDataMapping','none');
    
end



datacursormode on;
dcm_obj = datacursormode(fh);
set(dcm_obj,'DisplayStyle','window','SnapToDataVertex','on','UpdateFcn',@myupdatefcn);


function txt = myupdatefcn(empt,event_obj)

global cellS ACQinfo maskS G_RChandles

pos = round(get(event_obj,'Position')); %pos(1) is column dimension

masklabel = bwlabel(maskS.neuronmask(3:end-2,3:end-2),4);

cellID = masklabel(pos(2),pos(1));

oridom = linspace(0,180,length(cellS.orimuMat(1,:))+1);
oridom = oridom(1:end-1);

%Get the time domain
eval(['kernDel = ' get(G_RChandles.kernelLength,'string') ';']);
tauL = kernDel(2)-kernDel(1); %ms
acqPeriod = ACQinfo.linesPerFrame*ACQinfo.msPerLine; 
Ntau = round(tauL/acqPeriod);
taudom = linspace(kernDel(1),kernDel(2),Ntau);

if cellID ~= 0 %if not neuropil

    figure(98)
    subplot(1,2,1)

    tc = cellS.tcoursemaMat(cellID,:);
    tcSig = cellS.tcourseSigmaMat(cellID,:);
    fill([taudom fliplr(taudom)],[tc-tcSig fliplr(tc+tcSig)],'r')
    hold on
    plot(taudom,tc,'k','LineWidth',2)
    xlim([taudom(1) taudom(end)])
    hold off
    
    subplot(1,2,2)
    
    tc = cellS.orimuMat(cellID,:);
    [dum ind] = max(tc);
    tc = circshift(tc,[0 round(length(tc)/2)-ind]);
    
    domI = linspace(oridom(1),oridom(end),4*length(oridom));
    [tcI] = interp1(oridom,tc,domI,'spline');

    [param ffit varacc ffitI domIfit] = Gaussfit(domI,tcI,0);
    
    %errorbar(oridom,cellS.orimuMat(cellID,:),cellS.orisigMat(cellID,:))  
    
    plot(domIfit,ffitI)
    hold on
    plot(oridom,tc,'.b')
    title(num2str(param(2)))
    hold off
end


tar = get(get(event_obj,'Target'));
data = tar.CData;

txt = {['X: ',num2str(pos(1))],...
       ['Y: ',num2str(pos(2))],...
       ['Ori: ' sprintf('%2.1f %%',data(round(pos(2)),round(pos(1)))/64*180) ' deg']};

  
   
function [OMag OAng] = orifind(G,oridomain)

R = sum(G'.*exp(1i*oridomain*pi/90));
OAng = angle(R);                 %-pi to pi
OAng = OAng + pi*(1-sign(OAng+eps));  %0 to 2pi
OAng = OAng*90/pi;               %0 to 180
OMag = abs(R)/(sum(G));


function smoother = getSmoother(ktau,ksf,kori,taudom,oridom,sfdom)

ktau = [ktau zeros(1,length(taudom)-length(ktau))];
ksf = [ksf zeros(1,length(sfdom)-length(ksf))];
kori = [kori zeros(1,length(oridom)-length(kori))];
kdum = kori'*ksf;
for i = 1:length(ktau)
    smoother(:,:,i) = kdum*ktau(i);
end
smoother = smoother/sum(smoother(:));

