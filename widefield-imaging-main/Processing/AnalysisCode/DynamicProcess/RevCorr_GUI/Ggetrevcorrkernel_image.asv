function [kernIm kernblank countmat countmatblank] = Ggetrevcorrkernel_image(tauN,hh)

%Keep cellMat as an input because it filters it, aand I don't want to
%create a new variable of the same size

%3 takes the cell time courses as input, instead of all the images. 

global ACQinfo Analyzer G_RChandles G_handles domains mbestall nbestall

%%%%

blankNorm = get(G_RChandles.blankNorm,'value');

%%%%

acqPeriod = ACQinfo.linesPerFrame*ACQinfo.msPerLine; 
dtau = acqPeriod;
Ntau = round(tauN/acqPeriod);
taudom = 0:dtau:dtau*Ntau;


hper = getparam('h_per');
%hper = 1; %in my stimulus code, the sequences have only one value for each
%presentation, so you can't set hper to one

blankProb = getparam('blankProb');

expt = [Analyzer.M.anim '_' Analyzer.M.unit '_' Analyzer.M.expt];
load(['C:\2p_data\' Analyzer.M.anim '\log_files\' expt])
%load(['F:\neurostuff\log_files\' expt])
rseeds = eval(Analyzer.L.param{1}{2});

sfdom_dum = domains.sfdom;
%Insert a place-holder for the blanks... the sequence will have index
%values that are one longer than the length of the spatial frequency
%domain, which are the blanks.
if blankProb > 0
    sfdom_dum = [sfdom_dum NaN];   
end


Tf = 1000/frate;  %Frame period in ms (frate obtained from log file) 
Tupdate = Tf*hper;


for s = 1:length(rseeds)
    
    eval(['colorS = rseed' num2str(s) '.colorseq;']);
    eval(['phaseS = rseed' num2str(s) '.phaseseq;']);
    eval(['sfS = rseed' num2str(s) '.sfseq;']);
    eval(['oriS = rseed' num2str(s) '.oriseq;']);    
    
    colorseq{s} = domains.colordom(colorS);   
    phaseseq{s} =  domains.phasedom(phaseS);  
    sfseq{s} =  sfdom_dum(sfS);     
    oriseq{s} =  domains.oridom(oriS);  
    
    %insert NaN for blanks
    if blankProb > 0
        idb = find(sfS == length(domains.sfdom)+1);
        
        colorseq{s}(idb) = NaN;
        phaseseq{s}(idb) =  NaN;
        sfseq{s}(idb) =  NaN;  %this is redundant
        oriseq{s}(idb) =  NaN;
    end
 
end


%%%%%%%%%%%%%%%%%%%
oridom = domains.oridom;
sfdom = domains.sfdom;
phasedom = domains.phasedom;
colordom = domains.colordom;

NT = getnotrials;

tau_xy = ACQinfo.linesPerFrame/2*ACQinfo.msPerLine;

countmat = zeros(length(oridom),length(sfdom),length(phasedom),length(colordom));
kernIm = cell(length(oridom),length(sfdom),length(phasedom),length(colordom));
% countmatblank = zeros(1,length(taudom));
% kernblank = zeros(1,length(taudom));

trialdom = 1:1:getnotrials;

temp = GetTrialData([0 1 0 0],1);
Tdim = size(temp{1});
temp = mean(temp{1}(:,:,3:end/4),3);


if ~isempty(hh)
    hfilt = ones(Tdim(1),Tdim(2),length(hh));
    for m = 1:length(hh)
        hfilt(:,:,m) = hh(m)*hfilt(:,:,m);
    end
end

mbest = 0;
nbest = 0;
mbestall = [];
nbestall = [];
[xgrid ygrid] = meshgrid(1:length(temp(1,:)),1:length(temp(:,1)));
%xgrid = 1:length(temp(1,:));
%ygrid = (1:length(temp(:,1)))';

%for trialid = 2:2:length(trialdom)
for trialid = 2:2:60
trialid
    CH = GetTrialData([1 1 0 0],trialdom(trialid));
    
    if ~isempty(hh)
        CH{1}(:,:,1:end-1) = ifft(fft(CH{1}(:,:,1:end-1),[],3).*hfilt,[],3);
        CH{1}(:,:,1) = 0;
        CH{1}(:,:,end) = 0;
    end
    
%     if get(G_handles.slowMotionFlag,'value');
%         imdum = mean(CH{2}(:,:,2:end-2),3);
%         [mbest nbest] = getShiftVals(imdum,temp,[mbest nbest]);  %get the transformation for this trial
% 
% %         for z = 1:length(CH{1}(1,1,:))
% %             
% %             %CH{1}(:,:,z) = griddata(xgrid,ygrid,double(CH{1}(:,:,z)),xgrid+nbest,ygrid+mbest);
% %             CH{1}(:,:,z) = interp2(xgrid,ygrid,double(CH{1}(:,:,z)),xgrid+nbest,ygrid+mbest);
% %         end
%         
%         CH{1} = circshift(CH{1},[-mbest -nbest 0]);
% 
%         mbestall = [mbestall mbest];
%         nbestall = [nbestall nbest];
%     end


    if get(G_handles.slowMotionFlag,'value');

        mbest=mbest(end);nbest = nbest(end);
        L = 10;
        blockL = floor(length(CH{2}(1,1,:))/L);
        for block = 1:L
            idb = ((block-1)*blockL+1):block*blockL;
            imdum = mean(CH{2}(:,:,idb),3);
            [mbest(block+1) nbest(block+1)] = getShiftVals(imdum,temp,[mbest(block) nbest(block)]);  %get the transformation for this frame
            
            CH{1}(:,:,idb) = circshift(CH{1}(:,:,idb(z)),[-mbest(block+1) -nbest(block+1) 0]);
%             for z = 1:length(idb)
%                 CH{1}(:,:,idb(z)) = interp2(xgrid,ygrid,double(CH{1}(:,:,idb(z))),xgrid+nbest(block+1),ygrid+mbest(block+1));
%             end
        
        end
        %figure(60),plot([mbest(2:end)' nbest(2:end)'])


        %CH{1} = circshift(CH{1},[-mbest -nbest 0]);

        mbestall = [mbestall mbest];
        nbestall = [nbestall nbest];
    end
    
    

    T = trialdom(trialid);
    [cond rep] = getcondrep(T);

    %         dsync = diff(cellS.synctimes{cond,rep});
    %         if any(abs(dsync-Tupdate/1000)>.100)
    %             'Warning: syncs may be messed up'
    %         end

    N = length(CH{1}(1,1,:));
    tdom = (0:N-1)*acqPeriod;
    %tdom_pix = tdom + tau_xy - ACQinfo.stimPredelay*1000;   %time domain of the pixel relative to onset of first stimulus
    tdom_pix = tdom + tau_xy;

    seedno = Analyzer.loops.conds{cond}.val{1};

    oriseqdum = oriseq{seedno};
    sfseqdum = sfseq{seedno};
    phaseseqdum = phaseseq{seedno};
    colorseqdum = colorseq{seedno};

    for ori = 1:length(oridom)
        for sf = 1:length(sfdom)
            for phase = 1:length(phasedom)
                for color = 1:length(colordom)

                    id = find(oriseqdum == oridom(ori) & sfseqdum == sfdom(sf) & phaseseqdum == phasedom(phase)& colorseqdum == colordom(color));

                    if ~isempty(id)
                        
                        if isempty(kernIm{ori,sf,phase,color})
                            kernIm{ori,sf,phase,color} = 0;
                        end
                        stimes = (id-1)*Tupdate + getparam('predelay')*1000; %Stimulus times
                        %stimes = cellS.synctimes{cond,rep}(id)*1000;

                        for i = 1:length(stimes)

                            idx1 = find(tdom_pix>=stimes(i)+taudom(1)-dtau/2 & tdom_pix<stimes(i)+taudom(1)+dtau/2);
                            if ~isempty(idx1)
                                idx1 = idx1(1);
                                tpiece = idx1:idx1+length(taudom)-1;

                                if tpiece(1)>0 & tpiece(end)<N
                                    kernIm{ori,sf,phase,color} = kernIm{ori,sf,phase,color} + CH{1}(:,:,tpiece);
                                    countmat(ori,sf,phase,color) = countmat(ori,sf,phase,color) + 1;
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    id = find(isnan(oriseqdum));
    stimes = (id-1)*Tupdate + getparam('predelay')*1000; %Stimulus times
    %stimes = cellS.synctimes{cond,rep}(id)*1000;

%     for i = 1:length(stimes)
% 
%         idx1 = find(tdom_pix>=stimes(i)+taudom(1)-dtau/2 & tdom_pix<stimes(i)+taudom(1)+dtau/2);
%         idx1 = idx1(1);
%         tpiece = idx1:idx1+length(taudom)-1;
% 
%         if tpiece(1)>0 & tpiece(end)<length(tcourse)
%             kernblank{p} = kernblank{p} + tcourse(tpiece);
%             countmatblank{p} = countmatblank{p} + 1;
%         end
%     end


end


for ori = 1:length(oridom)
    for sf = 1:length(sfdom)
        for phase = 1:length(phasedom)
            for color = 1:length(colordom)
                kernIm{ori,sf,phase,color} = kernIm{ori,sf,phase,color}/countmat(ori,sf,phase,color);
                % kernblank = kernblank./countmatblank;
            end
        end
    end
end
kernblank = 0;
% kernblank{p} = kernblank{p}./countmatblank{p};
% 
% if blankNorm
%     for ori = 1:length(oridom)
%         for sf = 1:length(sfdom)
%             for phase = 1:length(phasedom)
%                 for color = 1:length(colordom)
% 
%                     kernIm{p}(ori,sf,phase,color,:) = (squeeze(kernIm{p}(ori,sf,phase,color,:)) - kernblank{p}(:));
% 
%                 end
%             end
%         end
%     end
% end

