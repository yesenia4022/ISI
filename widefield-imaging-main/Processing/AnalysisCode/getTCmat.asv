function [kernPop kernSigPop blankMu blankSig] = getTCmat

%Just get the f0 kernel for each neuron in the mask

global cellS maskS Analyzer

getCellStats  %reset the mean based on time window

%%%Get rid of the glia:
masklabel1 = bwlabel(maskS.bwCell{1},4);
masklabel2 = bwlabel(maskS.bwCell{2},4);
celldom = unique(masklabel1);
k1 = 1; k2 = 1;
for i = 2:length(celldom)  %Don't use neuropil
    id = find(masklabel1 == celldom(i));
    if sum(masklabel2(id))==0  %if there is no overlap
        nID(k1) = i;
        k1 = k1+1;
    else
        gID(k2) = i;
        k2 = k2+2;
    end
end
%%%


Nsym = length(Analyzer.loops.conds{1}.symbol);  %number of looping params
for idsym = 1:Nsym
    if strcmp('ori',Analyzer.loops.conds{1}.symbol{idsym})
        oriid = idsym;
    elseif strcmp('contrast',Analyzer.loops.conds{1}.symbol{idsym})
        contid = idsym;
    else
        noc = idsym;  %to identify a third condition, such as sfreq
    end
end

Nsym = length(Analyzer.loops.conds{1}.symbol);  %number of looping parameters

for i = 1:Nsym
    allDom{i} = getdomain(Analyzer.loops.conds{1}.symbol{i});
end
if Nsym == 1
    allDom{2} = NaN;
end

nc = getnoconditions;
bflag = stimblank(getnoconditions); %if a blank exists in this experiment
if bflag
    nc = nc-1;
end


kernPop = zeros(length(getdomain('contrast')),length(getdomain('ori')),length(nID))
kernPop = zeros(length(getdomain('contrast')),length(getdomain('ori')),length(nID))

for i = 1:length(nID)   %loop through each neuron
    
    kern = zeros(length(allDom{1}),length(allDom{2}));
    kernSig = zeros(length(allDom{1}),length(allDom{2}));

    for c = 1:nc
        for s = 1:Nsym       
            val = Analyzer.loops.conds{c}.val{s};
            idsym(s) = find(val == allDom{s});            
        end
        if Nsym == 1
            idsym(2) = 1;
        end
        
        if Nsym == 2
            kern(idsym(1),idsym(2)) = cellS.mu{c}(nID(i),:);
            kernSig(idsym(1),idsym(2)) = cellS.sig{c}(nID(i),:);
        elseif Nsym == 3
            kern(idsym(1),idsym(2),idsym(3)) = cellS.mu{c}(nID(i),:);
            kernSig(idsym(1),idsym(2),idsym(3)) = cellS.sig{c}(nID(i),:);
        end
    end
    
    if Nsym == 3
        kern = squeeze(mean(kern,noc));
        kernSig = squeeze(mean(kernSig,noc))/sqrt(size(kern,noc));
    end

    if oriid == 1
        kern = kern';
        kernSig = kernSig';
        dim = size(kern);
    end
    
    if bflag
        blankMu(i) = cellS.mu{end}(nID(i));
        blankSig(i) = cellS.sig{end}(nID(i));
    else
        blankMu(i) = NaN;
        blankSig(i) = NaN;
    end

    for c = 1:dim(1)  %each contrast

        kernPop(c,:,i) = kern(c,:);
        kernSigPop(c,:,i) = kernSig(c,:);

    end
            
end
